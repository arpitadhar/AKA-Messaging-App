import {
  __commonJS
} from "./chunk-ZS7NZCD4.js";

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/rc-util/lib/warning.js
var require_warning = __commonJS({
  "node_modules/rc-util/lib/warning.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.call = call;
    exports.default = void 0;
    exports.note = note;
    exports.noteOnce = noteOnce;
    exports.preMessage = void 0;
    exports.resetWarned = resetWarned;
    exports.warning = warning;
    exports.warningOnce = warningOnce;
    var warned = {};
    var preWarningFns = [];
    var preMessage = exports.preMessage = function preMessage2(fn) {
      preWarningFns.push(fn);
    };
    function warning(valid, message) {
      if (!valid && console !== void 0) {
        var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
          return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "warning");
        }, message);
        if (finalMessage) {
          console.error("Warning: ".concat(finalMessage));
        }
      }
    }
    function note(valid, message) {
      if (!valid && console !== void 0) {
        var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
          return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "note");
        }, message);
        if (finalMessage) {
          console.warn("Note: ".concat(finalMessage));
        }
      }
    }
    function resetWarned() {
      warned = {};
    }
    function call(method, valid, message) {
      if (!valid && !warned[message]) {
        method(false, message);
        warned[message] = true;
      }
    }
    function warningOnce(valid, message) {
      call(warning, valid, message);
    }
    function noteOnce(valid, message) {
      call(note, valid, message);
    }
    warningOnce.preMessage = preMessage;
    warningOnce.resetWarned = resetWarned;
    warningOnce.noteOnce = noteOnce;
    var _default = exports.default = warningOnce;
  }
});

// node_modules/@ant-design/cssinjs/lib/linters/utils.js
var require_utils = __commonJS({
  "node_modules/@ant-design/cssinjs/lib/linters/utils.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.lintWarning = lintWarning;
    var _warning = _interopRequireDefault(require_warning());
    function lintWarning(message, info) {
      var path = info.path, parentSelectors = info.parentSelectors;
      (0, _warning.default)(false, "[Ant Design CSS-in-JS] ".concat(path ? "Error in ".concat(path, ": ") : "").concat(message).concat(parentSelectors.length ? " Selector: ".concat(parentSelectors.join(" | ")) : ""));
    }
  }
});

// node_modules/@ant-design/cssinjs/lib/linters/contentQuotesLinter.js
var require_contentQuotesLinter = __commonJS({
  "node_modules/@ant-design/cssinjs/lib/linters/contentQuotesLinter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _utils = require_utils();
    var linter = function linter2(key, value, info) {
      if (key === "content") {
        var contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
        var contentValues = ["normal", "none", "initial", "inherit", "unset"];
        if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
          (0, _utils.lintWarning)("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"".concat(value, "\"'`."), info);
        }
      }
    };
    var _default = exports.default = linter;
  }
});

// node_modules/@ant-design/cssinjs/lib/linters/hashedAnimationLinter.js
var require_hashedAnimationLinter = __commonJS({
  "node_modules/@ant-design/cssinjs/lib/linters/hashedAnimationLinter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _utils = require_utils();
    var linter = function linter2(key, value, info) {
      if (key === "animation") {
        if (info.hashId && value !== "none") {
          (0, _utils.lintWarning)("You seem to be using hashed animation '".concat(value, "', in which case 'animationName' with Keyframe as value is recommended."), info);
        }
      }
    };
    var _default = exports.default = linter;
  }
});

// node_modules/@ant-design/cssinjs/lib/linters/legacyNotSelectorLinter.js
var require_legacyNotSelectorLinter = __commonJS({
  "node_modules/@ant-design/cssinjs/lib/linters/legacyNotSelectorLinter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _utils = require_utils();
    function isConcatSelector(selector) {
      var _selector$match;
      var notContent = ((_selector$match = selector.match(/:not\(([^)]*)\)/)) === null || _selector$match === void 0 ? void 0 : _selector$match[1]) || "";
      var splitCells = notContent.split(/(\[[^[]*])|(?=[.#])/).filter(function(str) {
        return str;
      });
      return splitCells.length > 1;
    }
    function parsePath(info) {
      return info.parentSelectors.reduce(function(prev, cur) {
        if (!prev) {
          return cur;
        }
        return cur.includes("&") ? cur.replace(/&/g, prev) : "".concat(prev, " ").concat(cur);
      }, "");
    }
    var linter = function linter2(key, value, info) {
      var parentSelectorPath = parsePath(info);
      var notList = parentSelectorPath.match(/:not\([^)]*\)/g) || [];
      if (notList.length > 0 && notList.some(isConcatSelector)) {
        (0, _utils.lintWarning)("Concat ':not' selector not support in legacy browsers.", info);
      }
    };
    var _default = exports.default = linter;
  }
});

// node_modules/@ant-design/cssinjs/lib/linters/logicalPropertiesLinter.js
var require_logicalPropertiesLinter = __commonJS({
  "node_modules/@ant-design/cssinjs/lib/linters/logicalPropertiesLinter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _utils = require_utils();
    var linter = function linter2(key, value, info) {
      switch (key) {
        case "marginLeft":
        case "marginRight":
        case "paddingLeft":
        case "paddingRight":
        case "left":
        case "right":
        case "borderLeft":
        case "borderLeftWidth":
        case "borderLeftStyle":
        case "borderLeftColor":
        case "borderRight":
        case "borderRightWidth":
        case "borderRightStyle":
        case "borderRightColor":
        case "borderTopLeftRadius":
        case "borderTopRightRadius":
        case "borderBottomLeftRadius":
        case "borderBottomRightRadius":
          (0, _utils.lintWarning)("You seem to be using non-logical property '".concat(key, "' which is not compatible with RTL mode. Please use logical properties and values instead. For more information: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties."), info);
          return;
        case "margin":
        case "padding":
        case "borderWidth":
        case "borderStyle":
          if (typeof value === "string") {
            var valueArr = value.split(" ").map(function(item) {
              return item.trim();
            });
            if (valueArr.length === 4 && valueArr[1] !== valueArr[3]) {
              (0, _utils.lintWarning)("You seem to be using '".concat(key, "' property with different left ").concat(key, " and right ").concat(key, ", which is not compatible with RTL mode. Please use logical properties and values instead. For more information: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties."), info);
            }
          }
          return;
        case "clear":
        case "textAlign":
          if (value === "left" || value === "right") {
            (0, _utils.lintWarning)("You seem to be using non-logical value '".concat(value, "' of ").concat(key, ", which is not compatible with RTL mode. Please use logical properties and values instead. For more information: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties."), info);
          }
          return;
        case "borderRadius":
          if (typeof value === "string") {
            var radiusGroups = value.split("/").map(function(item) {
              return item.trim();
            });
            var invalid = radiusGroups.reduce(function(result, group) {
              if (result) {
                return result;
              }
              var radiusArr = group.split(" ").map(function(item) {
                return item.trim();
              });
              if (radiusArr.length >= 2 && radiusArr[0] !== radiusArr[1]) {
                return true;
              }
              if (radiusArr.length === 3 && radiusArr[1] !== radiusArr[2]) {
                return true;
              }
              if (radiusArr.length === 4 && radiusArr[2] !== radiusArr[3]) {
                return true;
              }
              return result;
            }, false);
            if (invalid) {
              (0, _utils.lintWarning)("You seem to be using non-logical value '".concat(value, "' of ").concat(key, ", which is not compatible with RTL mode. Please use logical properties and values instead. For more information: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties."), info);
            }
          }
          return;
        default:
      }
    };
    var _default = exports.default = linter;
  }
});

// node_modules/@ant-design/cssinjs/lib/linters/NaNLinter.js
var require_NaNLinter = __commonJS({
  "node_modules/@ant-design/cssinjs/lib/linters/NaNLinter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _utils = require_utils();
    var linter = function linter2(key, value, info) {
      if (typeof value === "string" && /NaN/g.test(value) || Number.isNaN(value)) {
        (0, _utils.lintWarning)("Unexpected 'NaN' in property '".concat(key, ": ").concat(value, "'."), info);
      }
    };
    var _default = exports.default = linter;
  }
});

// node_modules/@ant-design/cssinjs/lib/linters/parentSelectorLinter.js
var require_parentSelectorLinter = __commonJS({
  "node_modules/@ant-design/cssinjs/lib/linters/parentSelectorLinter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _utils = require_utils();
    var linter = function linter2(key, value, info) {
      if (info.parentSelectors.some(function(selector) {
        var selectors = selector.split(",");
        return selectors.some(function(item) {
          return item.split("&").length > 2;
        });
      })) {
        (0, _utils.lintWarning)("Should not use more than one `&` in a selector.", info);
      }
    };
    var _default = exports.default = linter;
  }
});

// node_modules/@ant-design/cssinjs/lib/linters/index.js
var require_linters = __commonJS({
  "node_modules/@ant-design/cssinjs/lib/linters/index.js"(exports) {
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "NaNLinter", {
      enumerable: true,
      get: function get() {
        return _NaNLinter.default;
      }
    });
    Object.defineProperty(exports, "contentQuotesLinter", {
      enumerable: true,
      get: function get() {
        return _contentQuotesLinter.default;
      }
    });
    Object.defineProperty(exports, "hashedAnimationLinter", {
      enumerable: true,
      get: function get() {
        return _hashedAnimationLinter.default;
      }
    });
    Object.defineProperty(exports, "legacyNotSelectorLinter", {
      enumerable: true,
      get: function get() {
        return _legacyNotSelectorLinter.default;
      }
    });
    Object.defineProperty(exports, "logicalPropertiesLinter", {
      enumerable: true,
      get: function get() {
        return _logicalPropertiesLinter.default;
      }
    });
    Object.defineProperty(exports, "parentSelectorLinter", {
      enumerable: true,
      get: function get() {
        return _parentSelectorLinter.default;
      }
    });
    var _contentQuotesLinter = _interopRequireDefault(require_contentQuotesLinter());
    var _hashedAnimationLinter = _interopRequireDefault(require_hashedAnimationLinter());
    var _legacyNotSelectorLinter = _interopRequireDefault(require_legacyNotSelectorLinter());
    var _logicalPropertiesLinter = _interopRequireDefault(require_logicalPropertiesLinter());
    var _NaNLinter = _interopRequireDefault(require_NaNLinter());
    var _parentSelectorLinter = _interopRequireDefault(require_parentSelectorLinter());
  }
});
export default require_linters();
//# sourceMappingURL=@ant-design_cssinjs_lib_linters.js.map
